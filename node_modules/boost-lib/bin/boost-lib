#!/usr/bin/env node
"use strict";

var log = require("npmlog");
var _ = require("lodash");
var boostLib = require("../");
var BoostDownloader = boostLib.BoostDownloader;
var util = require("util");
var Bluebird = require("bluebird");

var version = require("../package").version;
var logLevels = ["silly", "verbose", "info", "http", "warn", "error"];
var yargs = require("yargs")
    .usage("Boost dependency resolver for CMake.js - v" + version + "\n\nUsage: $0 [<command>] [options]")
    .version(function () {
        return version;
    })
    .command("download", "Downloads specified Boost version if needed")
    .options({
        h: {
            alias: "help",
            demand: false,
            describe: "show this screen",
            type: "boolean"
        },
        l: {
            alias: "log-level",
            demand: false,
            describe: "sets log level (" + logLevels.join(", ") + "), default is info",
            type: "string"
        },
        V: {
            alias: "boost-version",
            demand: false,
            describe: "Boost version",
            type: "string"
        }
    });
var argv = yargs.argv;

// If help, then print and exit:

if (argv.h) {
    console.info(yargs.help());
    return;
}

// Setup log level:

if (argv.l && _.contains(logLevels, argv.l)) {
    log.level = argv.l;
    log.resume();
}

log.silly("CON", "argv:");
log.silly("CON", util.inspect(argv));

log.verbose("CON", "Parsing arguments");

var options = {
    version: argv.V
};

log.verbose("CON", "options:");
log.verbose("CON", util.inspect(options));

var command = _.first(argv._);

log.verbose("CON", "Running command: " + command);

function ifCommand(c, f) {
    if (c === command) {
        f();
        return true;
    }
    return false;
}

function exitOnError(promise) {
    try {
        if (_.isFunction(promise)) {
            promise = promise();
        }
    }
    catch (e) {
        promise = Bluebird.reject(e);
    }
    promise.catch(function(e) {
        if (log.level === "verbose" || log.level === "silly") {
            log.error("OMG", e.stack);
        }
        else {
            log.error("OMG", e.message);
        }
        process.exit(1);
    });
}

function download() {
    exitOnError(function() {
        return new BoostDownloader(options).ensureDownloaded()
            .then(function(path) {
                console.info(path);
            });
    });
}

var done = ifCommand("download", download);
if (!done) {
    if (command) {
        log.error("OMG", "Unknown command: " + command);
    }
    else {
        log.error("OMG", "Command expected.");
    }
    process.exit(1);
}
